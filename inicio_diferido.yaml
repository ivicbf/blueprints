blueprint:
  name: Inicio diferido
  description: Detecta la mejor franja consecutiva con menor precio PVPC y activa el dispositivo durante esa franja.
  domain: automation
  input:
    sensor_precio:
      name: Sensor de precios PVPC
      selector:
        entity:
          filter:
            domain: sensor
    switch_dispositivo:
      name: Dispositivo a controlar
      selector:
        entity:
          filter:
            domain: switch
    duracion_horas:
      name: Duración en horas de la franja
      description: Número de horas consecutivas para evaluar y activar el dispositivo
      default: 3
      selector:
        number:
          min: 1
          max: 24
          step: 1
    input_mejor_franja:
      name: Variable para almacenar la hora de inicio
      description: Input_number que recibirá la hora de inicio de la siguiente mejor franja
      selector:
        entity:
          filter:
            domain: input_number
    actions_yes:
      name: Acciones en la franja
      description: Acciones que se ejecutan en la mejor franja.
      icon: mdi:check
      collapsed: true
      input:
        action_on_before:
          name: Acciones antes de encender el dispositivo
          default: []
          selector:
            action: {}
        action_on_after:
          name: Acciones despues de encender el dispositivo
          default: []
          selector:
            action: {}

triggers:
  - trigger: time_pattern
    minutes: 0

action:
  - variables:
      prices: >
        {% set p = namespace(list=[]) %}
        {% for i in range(24) %}
          {% set attr = 'price_' + (i|string).zfill(2) + 'h' %}
          {% set value = state_attr(sensor_precio.entity_id, attr) %}
          {% set _ = p.list.append(value if value is not none else 9999) %}
        {% endfor %}
        {{ p.list }}
      min_sum: 9999
      min_index: 0
      window: duracion_horas
      now_hour: "{{ now().hour }}"
      start_opt: "{{ min_index }}"
      end_opt: "{{ min_index + window - 1 }}"
      start_now: "{{ now_hour }}"
      end_now: "{{ now_hour + window - 1 }}"
  - repeat:
      count: "{{ 24 - window + 1 }}"
      sequence:
        - variables:
            idx: "{{ repeat.index0 }}"
            window_sum: >
              {{ prices[idx:idx+window] | sum }}
        - choose:
            - conditions:
                - "{{ window_sum < min_sum }}"
              sequence:
                - variables:
                    min_sum: "{{ window_sum }}"
                    min_index: "{{ idx }}"
  - action: input_number.set_value
    target:
      entity_id: "{{ input_mejor_franja.entity_id }}"
    data:
      value: "{{ min_index }}"
  - choose:
      - conditions: >
          {{ (start_now >= start_opt) and (end_now <= end_opt) }}
        sequence:
          - choose:
              - conditions: "{{ actions_yes.action_on_before != [] }}"
                sequence: "{{ actions_yes.action_on_before }}"
          - service: switch.turn_on
            target:
              entity_id: "{{ switch_dispositivo.entity_id }}"
          - choose:
              - conditions: "{{ actions_yes.action_on_after != [] }}"
                sequence: "{{ actions_yes.action_on_after }}"

mode: single
