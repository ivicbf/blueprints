blueprint:
  name: Inicio diferido
  description: Detecta la mejor franja consecutiva con menor precio PVPC y activa el dispositivo durante esa franja.
  domain: automation
  input:
    pvpc_sensor:
      name: Sensor de precios PVPC
      selector:
        entity:
          filter:
            integration: pvpc_hourly_pricing
    target_device:
      name: Dispositivo a controlar
      description: 'Dispositivo a controlar'
      selector:
        target:
    slot:
      name: Duración en horas de la franja
      description: Número de horas consecutivas para evaluar y activar el dispositivo
      default: 3
      selector:
        number:
          min: 1
          max: 24
          step: 1
    input_best_slot:
      name: Variable para almacenar la hora de inicio
      description: Input_number que recibirá la hora de inicio de la siguiente mejor franja
      selector:
        entity:
          filter:
            domain: input_number
    tolerance_percentage:
      name: Margen de tolerancia (%) para aceptar ventana siguiente
      default: 20
      selector:
        number:
          min: 0
          max: 100
          step: 1
    # actions_yes:
    #   name: Acciones en la franja
    #   description: Acciones que se ejecutan en la mejor franja.
    #   icon: mdi:check
    #   collapsed: true
    #   input:
    #     action_on_before:
    #       name: Acciones antes de encender el dispositivo
    #       default: []
    #       selector:
    #         action: {}
    #     action_on_after:
    #       name: Acciones despues de encender el dispositivo
    #       default: []
    #       selector:
    #         action: {}
    input_on_before:
      name: Acciones antes de encender el dispositivo
      default: []
      selector:
        action: {}
    input_on_after:
      name: Acciones después de encender el dispositivo
      default: []
      selector:
        action: {}

triggers:
  - trigger: time_pattern
    minutes: 0

action:
  - variables:
      # slot: "{{ slot | int }}"
      slot: !input slot
      now_hour: "{{ now().hour }}"
      tolerance: "{{ (tolerance_percentage / 100) | float }}"
      prices: >
        [
          {% for i in range(24) -%}
            {{ state_attr(pvpc_sensor.entity_id, 'price_' + (i|string).zfill(2) + 'h') | float(9999) }}{{ "," if not loop.last else "" }}
          {%- endfor %}
        ]
      windows: >
        {% set list = [] %}
        {% for i in range(24 - slot + 1) %}
          {% set s = prices[i:i+slot] | sum %}
          {% set list = list + [(i, s)] %}
        {% endfor %}
        {{ list }}
      min_sum: >
        {{ windows | map(attribute=1) | min }}
      min_index: >
        {{ windows | selectattr('1','equalto',min_sum) | map(attribute=0) | first }}
      future_windows: >
        {{ windows | selectattr('0','ge',now_hour) | list }}
      future_min_sum: >
        {% if future_windows|length > 0 %}
          {{ future_windows | map(attribute=1) | min }}
        {% else %}
          99999
        {% endif %}
      future_min_index: >
        {% if future_windows|length > 0 %}
          {{ future_windows | selectattr('1','equalto',future_min_sum) | map(attribute=0) | first }}
        {% else %}
          -1
        {% endif %}
      selected_index: >
        {% if future_min_sum <= min_sum * (1 + tolerance) %}
          {{ future_min_index }}
        {% elif now_hour >= min_index and now_hour < (min_index + slot) %}
          {{ min_index }}
        {% else %}
          -1
        {% endif %}
  - service: input_number.set_value
    target:
      entity_id: !input input_best_slot
    data:
      value: "{{ selected_index }}"
  - choose:
      - conditions: "{{ selected_index != -1 and now_hour >= selected_index and now_hour < (selected_index + slot) }}"
        sequence:
          - choose:
              - conditions: "{{ input_on_before is defined }}"
                sequence: !input input_on_before
          - service: switch.turn_on
            target: !input target_device
          - choose:
              - conditions: "{{ input_on_after is defined }}"
                sequence: !input input_on_after
mode: single